// Generated by CoffeeScript 1.6.3
var LinkedList, assert, buckets, should;

assert = require('assert');

LinkedList = require('../srcs/LinkedList');

buckets = require('./buckets');

should = require('should');

describe('LinkedList', function() {
  var bucket_ll, clear_lists, fill_lists, fixture_array, ll;
  ll = new LinkedList;
  bucket_ll = new buckets.LinkedList();
  fixture_array = [42, 20, 10, 30, 40, 25, 50, 60, 100, 55, 53, 52, 110];
  fill_lists = function() {
    var value, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = fixture_array.length; _i < _len; _i++) {
      value = fixture_array[_i];
      bucket_ll.add(value);
      _results.push(ll.add(value));
    }
    return _results;
  };
  clear_lists = function() {
    ll.clear();
    return bucket_ll.clear();
  };
  beforeEach(function() {
    ll = new LinkedList;
    bucket_ll = new buckets.LinkedList;
    return fill_lists();
  });
  it("#isEmpty() should return true when head is null", function() {
    clear_lists();
    ll.isEmpty().should.be["true"];
    return ll.isEmpty().should.be.eql(bucket_ll.isEmpty());
  });
  it("#isEmpty() should return false when list filled", function() {
    ll.isEmpty().should.be["false"];
    return ll.isEmpty().should.be.eql(bucket_ll.isEmpty());
  });
  it("#add() should create first node when nothing in list", function() {
    ll.clear();
    ll.add(42);
    return ll.isEmpty().should.be["false"];
  });
  it("#add() should add to the end when no index specified", function() {
    ll.add(88);
    bucket_ll.add(88);
    return ll.toArray().should.be.eql(bucket_ll.toArray());
  });
  it("#add() should add to the begining when index = 0", function() {
    ll.add(88, 0);
    bucket_ll.add(88, 0);
    return ll.toArray().should.be.eql(bucket_ll.toArray());
  });
  it("#add() should add to the index specified", function() {
    ll.add(88, 4);
    bucket_ll.add(88, 4);
    return ll.toArray().should.be.eql(bucket_ll.toArray());
  });
  it("#add() should return false if the index is out of bound", function() {
    ll.add(88, 100);
    bucket_ll.add(88, 100);
    return ll.toArray().should.be.eql(bucket_ll.toArray());
  });
  it("#clear() should reset the list", function() {
    ll.clear();
    return ll.isEmpty().should.be["true"];
  });
  it("#elementAtIndex() should return false when index < 0", function() {
    return assert(ll.elementAtIndex(-5) === void 0);
  });
  it("#elementAtIndex() should return false when index > size()", function() {
    return assert(ll.elementAtIndex(500) === void 0);
  });
  it("#elementAtIndex() should return the value for the node at the given index", function() {
    ll.elementAtIndex(4).should.be.eql(40);
    return ll.elementAtIndex(4).should.be.eql(bucket_ll.elementAtIndex(4));
  });
  it("#indexOf() should return index of given element", function() {
    ll.indexOf(25).should.be.eql(5);
    return ll.indexOf(25).should.be.eql(bucket_ll.indexOf(25));
  });
  it("#indexOf() should return -1 when element doesn't exist", function() {
    ll.indexOf(231325).should.be.eql(-1);
    return ll.indexOf(25).should.be.eql(bucket_ll.indexOf(25));
  });
  it("#contains() should return false when element doesn't exist", function() {
    ll.contains(450).should.be.eql(false);
    return ll.contains(450).should.be.eql(bucket_ll.contains(450));
  });
  it("#contains() should return true when element doesn't exist", function() {
    ll.contains(42).should.be.eql(true);
    return ll.contains(42).should.be.eql(bucket_ll.contains(42));
  });
  it("#first() should return first element", function() {
    ll.first().should.be.eql(42);
    ll.first().should.be.eql(bucket_ll.first());
    ll.add(1402, 0);
    bucket_ll.add(1402, 0);
    ll.first().should.be.eql(1402);
    return ll.first().should.be.eql(bucket_ll.first());
  });
  it("#first() should return undefined if empty list", function() {
    clear_lists();
    assert(ll.first() === void 0);
    return assert(bucket_ll.first() === void 0);
  });
  it("#last() should return last element", function() {
    ll.last().should.be.eql(110);
    ll.last().should.be.eql(bucket_ll.last());
    ll.add(1402);
    bucket_ll.add(1402);
    ll.last().should.be.eql(1402);
    return ll.last().should.be.eql(bucket_ll.last());
  });
  it("#last() should return undefined if empty list", function() {
    clear_lists();
    assert(ll.last() === void 0);
    return assert(bucket_ll.last() === void 0);
  });
  it("#remove() should remove the first node successfully", function() {
    ll.remove(42);
    bucket_ll.remove(42);
    ll.first().should.be.eql(20.);
    return ll.first().should.be.eql(bucket_ll.first());
  });
  it("#remove() should remove an existing value successfully", function() {
    ll.remove(100);
    bucket_ll.remove(100);
    ll.contains(100).should.be["false"];
    return ll.toArray().should.be.eql(bucket_ll.toArray());
  });
  it("#remove() should affect size", function() {
    var initial_size;
    initial_size = ll.size();
    ll.remove(100);
    bucket_ll.remove(100);
    ll.size().should.be.eql(initial_size - 1);
    return ll.size().should.be.eql(bucket_ll.size());
  });
  it("#reverse() should reverse the list", function() {
    ll.reverse();
    bucket_ll.reverse();
    return ll.toArray().should.be.eql(bucket_ll.toArray());
  });
  return it("#reverse() should work even if empty list", function() {
    clear_lists();
    ll.reverse();
    bucket_ll.reverse();
    return ll.toArray().should.be.eql(bucket_ll.toArray());
  });
});
