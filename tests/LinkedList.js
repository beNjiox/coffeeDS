// Generated by CoffeeScript 1.6.3
var LinkedList, assert, buckets, should;

assert = require('assert');

LinkedList = require('../srcs/LinkedList');

buckets = require('./buckets');

should = require('should');

describe('LinkedList', function() {
  var bucket_ll, fill_list, fixture_array, ll;
  ll = new LinkedList;
  bucket_ll = new buckets.LinkedList();
  fixture_array = [42, 20, 10, 30, 40, 25, 50, 60, 100, 55, 53, 52, 110];
  fill_list = function() {
    var value, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = fixture_array.length; _i < _len; _i++) {
      value = fixture_array[_i];
      bucket_ll.add(value, 0);
      _results.push(ll.add(value, 0));
    }
    return _results;
  };
  beforeEach(function() {
    ll = new LinkedList;
    return bucket_ll = new buckets.LinkedList;
  });
  it("#isEmpty() should return true when head is null", function() {
    ll.isEmpty().should.be["true"];
    return ll.isEmpty().should.be.eql(bucket_ll.isEmpty());
  });
  it("#isEmpty() should return false when list filled", function() {
    fill_list();
    ll.isEmpty().should.be["false"];
    return ll.isEmpty().should.be.eql(bucket_ll.isEmpty());
  });
  it("#add() should create first node when nothing in list", function() {
    ll.add(42);
    return ll.isEmpty().should.be["false"];
  });
  it("#add() should add to the end when no index specified", function() {
    fill_list();
    ll.add(88);
    bucket_ll.add(88);
    return ll.toArray().should.be.eql(bucket_ll.toArray());
  });
  it("#add() should add to the begining when index = 0", function() {
    fill_list();
    ll.add(88, 0);
    bucket_ll.add(88, 0);
    return ll.toArray().should.be.eql(bucket_ll.toArray());
  });
  it("#add() should add to the index specified", function() {
    fill_list();
    ll.add(88, 4);
    bucket_ll.add(88, 4);
    return ll.toArray().should.be.eql(bucket_ll.toArray());
  });
  return it("#add() should return false if the index is out of bound", function() {
    fill_list();
    ll.add(88, 100);
    bucket_ll.add(88, 100);
    return ll.toArray().should.be.eql(bucket_ll.toArray());
  });
});
