// Generated by CoffeeScript 1.6.3
var LLNode, LinkedList;

LLNode = require('./LLNode');

/*
    - add(item, index)
    - clear()
    - elementAtIndex(index)
    - size()
    - toArray()
    - contains(item, equalsFunction)
    - indexOf(item, equalsFunction)
    - isEmpty()
    - forEach(callback)
    - first()
    - last()
    - remove(item, equalsFunction)
    - removeElementAtIndex(index)
    - reverse()
    - half()

    todo:
       - equals(other, equalsFunction)
       - sum
       - merge
*/


LinkedList = (function() {
  function LinkedList() {}

  LinkedList.prototype.head = null;

  LinkedList.prototype._size = 0;

  LinkedList.prototype.indexOf = function(value) {
    var current, k;
    current = this.head;
    k = 0;
    while (current) {
      if (current.value === value) {
        return k;
      }
      current = current.next;
      k++;
    }
    return -1;
  };

  LinkedList.prototype.contains = function(value) {
    return this.indexOf(value) !== -1;
  };

  LinkedList.prototype._nodeAtIndex = function(index) {
    var current, i;
    current = this.head;
    i = 0;
    while (i < index) {
      current = current.next;
      i++;
    }
    return current;
  };

  LinkedList.prototype.elementAtIndex = function(index) {
    var node;
    if (index > this._size || index < 0) {
      return void 0;
    }
    node = this._nodeAtIndex(index);
    return node.value;
  };

  LinkedList.prototype.clear = function() {
    return this.head = null;
  };

  LinkedList.prototype.isEmpty = function() {
    return this.head === null;
  };

  LinkedList.prototype.size = function(traverse) {
    if (traverse == null) {
      traverse = false;
    }
    if (traverse = true) {
      return this._size;
    }
    this._size = 0;
    this.forEach(function(elem) {
      return this._size++;
    });
    return this._size;
  };

  LinkedList.prototype._addToTail = function(value) {
    var current;
    current = this.head;
    while (current.next !== null) {
      current = current.next;
    }
    current.next = new LLNode(value);
    return true;
  };

  LinkedList.prototype._addToIndex = function(value, index) {
    var current, k, new_node, tmp;
    new_node = new LLNode(value);
    current = this.head;
    tmp = current;
    k = 0;
    while (current) {
      current = current.next;
      if (k++ === index - 1) {
        break;
      }
      tmp = tmp.next;
    }
    if (index > k) {
      return false;
    }
    tmp.next = new_node;
    new_node.next = current;
    return true;
  };

  LinkedList.prototype._addToHead = function(value) {
    var new_node;
    new_node = new LLNode(value);
    new_node.next = this.head;
    this.head = new_node;
    return true;
  };

  LinkedList.prototype.add = function(value, index) {
    var new_node;
    if (index == null) {
      index = null;
    }
    new_node = new LLNode(value);
    if (this.isEmpty()) {
      if (index > 0) {
        return false;
      } else {
        this._addToHead(value);
      }
    } else {
      if (index === 0) {
        this._addToHead(value);
      } else if (index === null) {
        this._addToTail(value);
      } else {
        this._addToIndex(value, index);
      }
    }
    return this._size++;
  };

  LinkedList.prototype.toArray = function() {
    var node_array;
    node_array = [];
    this.forEach(function(elm) {
      return node_array.push(elm.value);
    });
    return node_array;
  };

  LinkedList.prototype.toString = function() {
    if (this.isEmpty()) {
      return "";
    } else {
      return this.toArray().toString();
    }
  };

  LinkedList.prototype.forEach = function(cb) {
    var current, _results;
    current = this.head;
    _results = [];
    while (current) {
      cb(current);
      _results.push(current = current.next);
    }
    return _results;
  };

  LinkedList.prototype.first = function() {
    if (this.isEmpty()) {
      return void 0;
    } else {
      return this.head.value;
    }
  };

  LinkedList.prototype.last = function() {
    var last_elem;
    if (this.isEmpty()) {
      return void 0;
    }
    last_elem = null;
    this.forEach(function(elem) {
      if (elem.next === null) {
        return last_elem = elem;
      }
    });
    return last_elem.value;
  };

  LinkedList.prototype.remove = function(value) {
    var index;
    index = this.indexOf(value);
    if (index === -1) {
      return false;
    }
    return this.removeElementAtIndex(index);
  };

  LinkedList.prototype.removeElementAtIndex = function(index) {
    var node;
    if (index !== 0) {
      node = this._nodeAtIndex(index - 1);
      node.next = node.next.next;
    } else {
      this.head = this.head.next;
    }
    return this._size--;
  };

  LinkedList.prototype.reverse = function() {
    var current, cursor, next;
    current = this.head;
    cursor = null;
    next = this.head;
    while (current) {
      next = current.next;
      current.next = cursor;
      cursor = current;
      current = next;
    }
    return this.head = cursor;
  };

  LinkedList.prototype.half = function() {
    var faster, i, slower;
    faster = this.head;
    slower = this.head;
    i = 0;
    while (faster) {
      faster = faster.next;
      if (faster) {
        faster = faster.next;
        slower = slower.next;
      }
    }
    return slower.value;
  };

  return LinkedList;

})();

module.exports = LinkedList;
